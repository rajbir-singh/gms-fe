var StorageUtil = /** @class */ (function () {
    function StorageUtil() {
    }
    StorageUtil.get = function (storage, key) {
        var value = StorageUtil.parse(storage.getItem(key) || 'null') || null;
        if (value === null)
            return null;
        if (typeof value === 'object' &&
            typeof value._expired !== 'undefined' &&
            value._expired !== 0 &&
            +new Date() > value._expired) {
            StorageUtil.remove(storage, key);
            return null;
        }
        return value._value || null;
    };
    StorageUtil.set = function (storage, key, value, expiredAt, expiredUnit) {
        if (expiredAt === void 0) { expiredAt = 0; }
        if (expiredUnit === void 0) { expiredUnit = 't'; }
        storage.setItem(key, StorageUtil.stringify({
            _expired: StorageUtil.getExpired(expiredAt, expiredUnit),
            _value: value,
        }));
    };
    StorageUtil.remove = function (storage, key) {
        storage.removeItem(key);
    };
    StorageUtil.key = function (storage, index) {
        return storage.key(index);
    };
    StorageUtil.getExpired = function (val, unit) {
        if (val <= 0)
            return 0;
        var now = +new Date();
        switch (unit) {
            case 's': // 秒
                return now + 1000 * val;
            case 'm': // 分
                return now + 1000 * 60 * val;
            case 'h': // 时
                return now + 1000 * 60 * 60 * val;
            case 'd': // 天
                return now + 1000 * 60 * 60 * 24 * val;
            case 'w': // 周
                return now + 1000 * 60 * 60 * 24 * 7 * val;
            case 'y': // 年
                return now + 1000 * 60 * 60 * 24 * 365 * val;
            case 't': // 自定义
                return now + val;
        }
        return 0;
    };
    StorageUtil.stringify = function (value) {
        return JSON.stringify(value);
    };
    StorageUtil.parse = function (text) {
        try {
            return JSON.parse(text) || null;
        }
        catch (e) {
            return text;
        }
    };
    return StorageUtil;
}());
export { StorageUtil };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItd2ViLXN0b3JhZ2UvIiwic291cmNlcyI6WyJzcmMvdXRpbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFZQTtJQUFBO0lBMEVBLENBQUM7SUF6RVEsZUFBRyxHQUFWLFVBQVcsT0FBZ0IsRUFBRSxHQUFXO1FBQ3RDLElBQU0sS0FBSyxHQUFHLFdBQVcsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUM7UUFDeEUsSUFBSSxLQUFLLEtBQUssSUFBSTtZQUFFLE9BQU8sSUFBSSxDQUFDO1FBQ2hDLElBQ0UsT0FBTyxLQUFLLEtBQUssUUFBUTtZQUN6QixPQUFPLEtBQUssQ0FBQyxRQUFRLEtBQUssV0FBVztZQUNyQyxLQUFLLENBQUMsUUFBUSxLQUFLLENBQUM7WUFDcEIsQ0FBQyxJQUFJLElBQUksRUFBRSxHQUFHLEtBQUssQ0FBQyxRQUFRLEVBQzVCO1lBQ0EsV0FBVyxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFDakMsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUVELE9BQU8sS0FBSyxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUM7SUFDOUIsQ0FBQztJQUVNLGVBQUcsR0FBVixVQUNFLE9BQWdCLEVBQ2hCLEdBQVcsRUFDWCxLQUFVLEVBQ1YsU0FBcUIsRUFDckIsV0FBOEI7UUFEOUIsMEJBQUEsRUFBQSxhQUFxQjtRQUNyQiw0QkFBQSxFQUFBLGlCQUE4QjtRQUU5QixPQUFPLENBQUMsT0FBTyxDQUNiLEdBQUcsRUFDSCxXQUFXLENBQUMsU0FBUyxDQUFDO1lBQ3BCLFFBQVEsRUFBRSxXQUFXLENBQUMsVUFBVSxDQUFDLFNBQVMsRUFBRSxXQUFXLENBQUM7WUFDeEQsTUFBTSxFQUFFLEtBQUs7U0FDZCxDQUFDLENBQ0gsQ0FBQztJQUNKLENBQUM7SUFFTSxrQkFBTSxHQUFiLFVBQWMsT0FBZ0IsRUFBRSxHQUFXO1FBQ3pDLE9BQU8sQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDMUIsQ0FBQztJQUVNLGVBQUcsR0FBVixVQUFXLE9BQWdCLEVBQUUsS0FBYTtRQUN4QyxPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDNUIsQ0FBQztJQUVjLHNCQUFVLEdBQXpCLFVBQTBCLEdBQVcsRUFBRSxJQUFpQjtRQUN0RCxJQUFJLEdBQUcsSUFBSSxDQUFDO1lBQUUsT0FBTyxDQUFDLENBQUM7UUFDdkIsSUFBTSxHQUFHLEdBQUcsQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDO1FBQ3hCLFFBQVEsSUFBSSxFQUFFO1lBQ1osS0FBSyxHQUFHLEVBQUUsSUFBSTtnQkFDWixPQUFPLEdBQUcsR0FBRyxJQUFJLEdBQUcsR0FBRyxDQUFDO1lBQzFCLEtBQUssR0FBRyxFQUFFLElBQUk7Z0JBQ1osT0FBTyxHQUFHLEdBQUcsSUFBSSxHQUFHLEVBQUUsR0FBRyxHQUFHLENBQUM7WUFDL0IsS0FBSyxHQUFHLEVBQUUsSUFBSTtnQkFDWixPQUFPLEdBQUcsR0FBRyxJQUFJLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxHQUFHLENBQUM7WUFDcEMsS0FBSyxHQUFHLEVBQUUsSUFBSTtnQkFDWixPQUFPLEdBQUcsR0FBRyxJQUFJLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsR0FBRyxDQUFDO1lBQ3pDLEtBQUssR0FBRyxFQUFFLElBQUk7Z0JBQ1osT0FBTyxHQUFHLEdBQUcsSUFBSSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUM7WUFDN0MsS0FBSyxHQUFHLEVBQUUsSUFBSTtnQkFDWixPQUFPLEdBQUcsR0FBRyxJQUFJLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztZQUMvQyxLQUFLLEdBQUcsRUFBRSxNQUFNO2dCQUNkLE9BQU8sR0FBRyxHQUFHLEdBQUcsQ0FBQztTQUNwQjtRQUNELE9BQU8sQ0FBQyxDQUFDO0lBQ1gsQ0FBQztJQUVjLHFCQUFTLEdBQXhCLFVBQXlCLEtBQVU7UUFDakMsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQy9CLENBQUM7SUFFYyxpQkFBSyxHQUFwQixVQUFxQixJQUFZO1FBQy9CLElBQUk7WUFDRixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDO1NBQ2pDO1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFDVixPQUFPLElBQUksQ0FBQztTQUNiO0lBQ0gsQ0FBQztJQUNILGtCQUFDO0FBQUQsQ0FBQyxBQTFFRCxJQTBFQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiDov4fmnJ/ml7bpl7TljZXkvY1cclxuICogc++8muenklxyXG4gKiBt77ya5YiGXHJcbiAqIGjvvJrml7ZcclxuICogZO+8muWkqVxyXG4gKiB377ya5ZGoXHJcbiAqIHnvvJrlubRcclxuICogdO+8muiHquWumuS5ie+8iOavq+enkm1z77yJXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBFeHBpcmVkVW5pdCA9ICdzJyB8ICdtJyB8ICdoJyB8ICdkJyB8ICd3JyB8ICd5JyB8ICd0JztcclxuXHJcbmV4cG9ydCBjbGFzcyBTdG9yYWdlVXRpbCB7XHJcbiAgc3RhdGljIGdldChzdG9yYWdlOiBTdG9yYWdlLCBrZXk6IHN0cmluZykge1xyXG4gICAgY29uc3QgdmFsdWUgPSBTdG9yYWdlVXRpbC5wYXJzZShzdG9yYWdlLmdldEl0ZW0oa2V5KSB8fCAnbnVsbCcpIHx8IG51bGw7XHJcbiAgICBpZiAodmFsdWUgPT09IG51bGwpIHJldHVybiBudWxsO1xyXG4gICAgaWYgKFxyXG4gICAgICB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmXHJcbiAgICAgIHR5cGVvZiB2YWx1ZS5fZXhwaXJlZCAhPT0gJ3VuZGVmaW5lZCcgJiZcclxuICAgICAgdmFsdWUuX2V4cGlyZWQgIT09IDAgJiZcclxuICAgICAgK25ldyBEYXRlKCkgPiB2YWx1ZS5fZXhwaXJlZFxyXG4gICAgKSB7XHJcbiAgICAgIFN0b3JhZ2VVdGlsLnJlbW92ZShzdG9yYWdlLCBrZXkpO1xyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdmFsdWUuX3ZhbHVlIHx8IG51bGw7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgc2V0KFxyXG4gICAgc3RvcmFnZTogU3RvcmFnZSxcclxuICAgIGtleTogc3RyaW5nLFxyXG4gICAgdmFsdWU6IGFueSxcclxuICAgIGV4cGlyZWRBdDogbnVtYmVyID0gMCxcclxuICAgIGV4cGlyZWRVbml0OiBFeHBpcmVkVW5pdCA9ICd0JyxcclxuICApIHtcclxuICAgIHN0b3JhZ2Uuc2V0SXRlbShcclxuICAgICAga2V5LFxyXG4gICAgICBTdG9yYWdlVXRpbC5zdHJpbmdpZnkoe1xyXG4gICAgICAgIF9leHBpcmVkOiBTdG9yYWdlVXRpbC5nZXRFeHBpcmVkKGV4cGlyZWRBdCwgZXhwaXJlZFVuaXQpLFxyXG4gICAgICAgIF92YWx1ZTogdmFsdWUsXHJcbiAgICAgIH0pLFxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyByZW1vdmUoc3RvcmFnZTogU3RvcmFnZSwga2V5OiBzdHJpbmcpIHtcclxuICAgIHN0b3JhZ2UucmVtb3ZlSXRlbShrZXkpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGtleShzdG9yYWdlOiBTdG9yYWdlLCBpbmRleDogbnVtYmVyKSB7XHJcbiAgICByZXR1cm4gc3RvcmFnZS5rZXkoaW5kZXgpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBzdGF0aWMgZ2V0RXhwaXJlZCh2YWw6IG51bWJlciwgdW5pdDogRXhwaXJlZFVuaXQpOiBudW1iZXIge1xyXG4gICAgaWYgKHZhbCA8PSAwKSByZXR1cm4gMDtcclxuICAgIGNvbnN0IG5vdyA9ICtuZXcgRGF0ZSgpO1xyXG4gICAgc3dpdGNoICh1bml0KSB7XHJcbiAgICAgIGNhc2UgJ3MnOiAvLyDnp5JcclxuICAgICAgICByZXR1cm4gbm93ICsgMTAwMCAqIHZhbDtcclxuICAgICAgY2FzZSAnbSc6IC8vIOWIhlxyXG4gICAgICAgIHJldHVybiBub3cgKyAxMDAwICogNjAgKiB2YWw7XHJcbiAgICAgIGNhc2UgJ2gnOiAvLyDml7ZcclxuICAgICAgICByZXR1cm4gbm93ICsgMTAwMCAqIDYwICogNjAgKiB2YWw7XHJcbiAgICAgIGNhc2UgJ2QnOiAvLyDlpKlcclxuICAgICAgICByZXR1cm4gbm93ICsgMTAwMCAqIDYwICogNjAgKiAyNCAqIHZhbDtcclxuICAgICAgY2FzZSAndyc6IC8vIOWRqFxyXG4gICAgICAgIHJldHVybiBub3cgKyAxMDAwICogNjAgKiA2MCAqIDI0ICogNyAqIHZhbDtcclxuICAgICAgY2FzZSAneSc6IC8vIOW5tFxyXG4gICAgICAgIHJldHVybiBub3cgKyAxMDAwICogNjAgKiA2MCAqIDI0ICogMzY1ICogdmFsO1xyXG4gICAgICBjYXNlICd0JzogLy8g6Ieq5a6a5LmJXHJcbiAgICAgICAgcmV0dXJuIG5vdyArIHZhbDtcclxuICAgIH1cclxuICAgIHJldHVybiAwO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBzdGF0aWMgc3RyaW5naWZ5KHZhbHVlOiBhbnkpIHtcclxuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHN0YXRpYyBwYXJzZSh0ZXh0OiBzdHJpbmcpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIHJldHVybiBKU09OLnBhcnNlKHRleHQpIHx8IG51bGw7XHJcbiAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgIHJldHVybiB0ZXh0O1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0=