import { Injectable, NgModule, defineInjectable } from '@angular/core';

class StorageUtil {
    static get(storage, key) {
        const value = StorageUtil.parse(storage.getItem(key) || 'null') || null;
        if (value === null)
            return null;
        if (typeof value === 'object' &&
            typeof value._expired !== 'undefined' &&
            value._expired !== 0 &&
            +new Date() > value._expired) {
            StorageUtil.remove(storage, key);
            return null;
        }
        return value._value || null;
    }
    static set(storage, key, value, expiredAt = 0, expiredUnit = 't') {
        storage.setItem(key, StorageUtil.stringify({
            _expired: StorageUtil.getExpired(expiredAt, expiredUnit),
            _value: value,
        }));
    }
    static remove(storage, key) {
        storage.removeItem(key);
    }
    static key(storage, index) {
        return storage.key(index);
    }
    static getExpired(val, unit) {
        if (val <= 0)
            return 0;
        const now = +new Date();
        switch (unit) {
            case 's': // 秒
                return now + 1000 * val;
            case 'm': // 分
                return now + 1000 * 60 * val;
            case 'h': // 时
                return now + 1000 * 60 * 60 * val;
            case 'd': // 天
                return now + 1000 * 60 * 60 * 24 * val;
            case 'w': // 周
                return now + 1000 * 60 * 60 * 24 * 7 * val;
            case 'y': // 年
                return now + 1000 * 60 * 60 * 24 * 365 * val;
            case 't': // 自定义
                return now + val;
        }
        return 0;
    }
    static stringify(value) {
        return JSON.stringify(value);
    }
    static parse(text) {
        try {
            return JSON.parse(text) || null;
        }
        catch (e) {
            return text;
        }
    }
}

const cache = {};
function WebStorage(storage, key, expiredAt = 0, expiredUnit = 'd') {
    return (target, propertyName) => {
        key = key || propertyName;
        Object.defineProperty(target, propertyName, {
            get: () => {
                return StorageUtil.get(storage, key);
            },
            set: (value) => {
                if (!cache[key]) {
                    const storedValue = StorageUtil.get(storage, key);
                    if (storedValue === null) {
                        StorageUtil.set(storage, key, value, expiredAt, expiredUnit);
                    }
                    cache[key] = true;
                    return;
                }
                StorageUtil.set(storage, key, value, expiredAt, expiredUnit);
            },
            enumerable: true,
            configurable: true,
        });
    };
}
/**
 * localStorage 装饰器
 *
 * @param [key] 指定一个新key
 * @param [expiredAt=0] 过期时间值，0表示永久有效。
 * @param [expiredUnit='t'] 过期时间单位（默认：自定义[单位：毫秒]）
 */
function LocalStorage(key, expiredAt = 0, expiredUnit = 't') {
    return WebStorage(localStorage, key, expiredAt, expiredUnit);
}
/**
 * sessionStorage 装饰器
 *
 * @param [key] 指定一个新key
 * @param [expiredAt=0] 过期时间值，0表示在 `sessionStorage` 有效时期范围内永久有效。
 * @param [expiredUnit='t'] 过期时间单位（默认：自定义[单位：毫秒]）
 */
function SessionStorage(key, expiredAt = 0, expiredUnit = 't') {
    return WebStorage(sessionStorage, key, expiredAt, expiredUnit);
}

class StorageService {
    constructor(storage) {
        this.storage = storage;
    }
    get(key) {
        return StorageUtil.get(this.storage, key);
    }
    set(key, value, expiredAt = 0, expiredUnit = 'd') {
        return StorageUtil.set(this.storage, key, value, expiredAt, expiredUnit);
    }
    /**
     * 删除指定key，如：
     * - `remove('key')` 删除 `key` 键
     * - `remove(/BMap_\w+/)` 批量删除所有 BMap_ 开头的键
     * @param key 键名或正则表达式
     */
    remove(key) {
        if (typeof key === 'string') {
            StorageUtil.remove(this.storage, key);
            return;
        }
        let index = 0;
        let next = StorageUtil.key(this.storage, index);
        const ls = [];
        while (next) {
            if (key.test(next))
                ls.push(next);
            next = StorageUtil.key(this.storage, ++index);
        }
        ls.forEach(v => StorageUtil.remove(this.storage, v));
    }
    clear() {
        this.storage.clear();
    }
}
class LocalStorageService extends StorageService {
    constructor() {
        super(localStorage);
    }
}
LocalStorageService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */
LocalStorageService.ctorParameters = () => [];
LocalStorageService.ngInjectableDef = defineInjectable({ factory: function LocalStorageService_Factory() { return new LocalStorageService(); }, token: LocalStorageService, providedIn: "root" });
class SessionStorageService extends StorageService {
    constructor() {
        super(sessionStorage);
    }
}
SessionStorageService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */
SessionStorageService.ctorParameters = () => [];
SessionStorageService.ngInjectableDef = defineInjectable({ factory: function SessionStorageService_Factory() { return new SessionStorageService(); }, token: SessionStorageService, providedIn: "root" });

class AngularWebStorageModule {
}
AngularWebStorageModule.decorators = [
    { type: NgModule }
];

/**
 * Generated bundle index. Do not edit.
 */

export { LocalStorage, SessionStorage, StorageService, LocalStorageService, SessionStorageService, AngularWebStorageModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,