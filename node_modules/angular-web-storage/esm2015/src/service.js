import { Injectable } from '@angular/core';
import { StorageUtil } from './util';
import * as i0 from "@angular/core";
export class StorageService {
    constructor(storage) {
        this.storage = storage;
    }
    get(key) {
        return StorageUtil.get(this.storage, key);
    }
    set(key, value, expiredAt = 0, expiredUnit = 'd') {
        return StorageUtil.set(this.storage, key, value, expiredAt, expiredUnit);
    }
    /**
     * 删除指定key，如：
     * - `remove('key')` 删除 `key` 键
     * - `remove(/BMap_\w+/)` 批量删除所有 BMap_ 开头的键
     * @param key 键名或正则表达式
     */
    remove(key) {
        if (typeof key === 'string') {
            StorageUtil.remove(this.storage, key);
            return;
        }
        let index = 0;
        let next = StorageUtil.key(this.storage, index);
        const ls = [];
        while (next) {
            if (key.test(next))
                ls.push(next);
            next = StorageUtil.key(this.storage, ++index);
        }
        ls.forEach(v => StorageUtil.remove(this.storage, v));
    }
    clear() {
        this.storage.clear();
    }
}
export class LocalStorageService extends StorageService {
    constructor() {
        super(localStorage);
    }
}
LocalStorageService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */
LocalStorageService.ctorParameters = () => [];
LocalStorageService.ngInjectableDef = i0.defineInjectable({ factory: function LocalStorageService_Factory() { return new LocalStorageService(); }, token: LocalStorageService, providedIn: "root" });
export class SessionStorageService extends StorageService {
    constructor() {
        super(sessionStorage);
    }
}
SessionStorageService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */
SessionStorageService.ctorParameters = () => [];
SessionStorageService.ngInjectableDef = i0.defineInjectable({ factory: function SessionStorageService_Factory() { return new SessionStorageService(); }, token: SessionStorageService, providedIn: "root" });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItd2ViLXN0b3JhZ2UvIiwic291cmNlcyI6WyJzcmMvc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxXQUFXLEVBQWUsTUFBTSxRQUFRLENBQUM7O0FBRWxELE1BQU0sT0FBTyxjQUFjO0lBQ3pCLFlBQW9CLE9BQWdCO1FBQWhCLFlBQU8sR0FBUCxPQUFPLENBQVM7SUFBRyxDQUFDO0lBRXhDLEdBQUcsQ0FBQyxHQUFXO1FBQ2IsT0FBTyxXQUFXLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUVELEdBQUcsQ0FDRCxHQUFXLEVBQ1gsS0FBVSxFQUNWLFlBQW9CLENBQUMsRUFDckIsY0FBMkIsR0FBRztRQUU5QixPQUFPLFdBQVcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxXQUFXLENBQUMsQ0FBQztJQUMzRSxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCxNQUFNLENBQUMsR0FBb0I7UUFDekIsSUFBSSxPQUFPLEdBQUcsS0FBSyxRQUFRLEVBQUU7WUFDM0IsV0FBVyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1lBQ3RDLE9BQU87U0FDUjtRQUNELElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQztRQUNkLElBQUksSUFBSSxHQUFHLFdBQVcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNoRCxNQUFNLEVBQUUsR0FBYSxFQUFFLENBQUM7UUFDeEIsT0FBTyxJQUFJLEVBQUU7WUFDWCxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO2dCQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDbEMsSUFBSSxHQUFHLFdBQVcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO1NBQy9DO1FBQ0QsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3ZELENBQUM7SUFFRCxLQUFLO1FBQ0gsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUN2QixDQUFDO0NBQ0Y7QUFHRCxNQUFNLE9BQU8sbUJBQW9CLFNBQVEsY0FBYztJQUNyRDtRQUNFLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUN0QixDQUFDOzs7WUFKRixVQUFVLFNBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFOzs7OztBQVFsQyxNQUFNLE9BQU8scUJBQXNCLFNBQVEsY0FBYztJQUN2RDtRQUNFLEtBQUssQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUN4QixDQUFDOzs7WUFKRixVQUFVLFNBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBTdG9yYWdlVXRpbCwgRXhwaXJlZFVuaXQgfSBmcm9tICcuL3V0aWwnO1xyXG5cclxuZXhwb3J0IGNsYXNzIFN0b3JhZ2VTZXJ2aWNlIHtcclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHN0b3JhZ2U6IFN0b3JhZ2UpIHt9XHJcblxyXG4gIGdldChrZXk6IHN0cmluZykge1xyXG4gICAgcmV0dXJuIFN0b3JhZ2VVdGlsLmdldCh0aGlzLnN0b3JhZ2UsIGtleSk7XHJcbiAgfVxyXG5cclxuICBzZXQoXHJcbiAgICBrZXk6IHN0cmluZyxcclxuICAgIHZhbHVlOiBhbnksXHJcbiAgICBleHBpcmVkQXQ6IG51bWJlciA9IDAsXHJcbiAgICBleHBpcmVkVW5pdDogRXhwaXJlZFVuaXQgPSAnZCcsXHJcbiAgKSB7XHJcbiAgICByZXR1cm4gU3RvcmFnZVV0aWwuc2V0KHRoaXMuc3RvcmFnZSwga2V5LCB2YWx1ZSwgZXhwaXJlZEF0LCBleHBpcmVkVW5pdCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDliKDpmaTmjIflrpprZXnvvIzlpoLvvJpcclxuICAgKiAtIGByZW1vdmUoJ2tleScpYCDliKDpmaQgYGtleWAg6ZSuXHJcbiAgICogLSBgcmVtb3ZlKC9CTWFwX1xcdysvKWAg5om56YeP5Yig6Zmk5omA5pyJIEJNYXBfIOW8gOWktOeahOmUrlxyXG4gICAqIEBwYXJhbSBrZXkg6ZSu5ZCN5oiW5q2j5YiZ6KGo6L6+5byPXHJcbiAgICovXHJcbiAgcmVtb3ZlKGtleTogc3RyaW5nIHwgUmVnRXhwKSB7XHJcbiAgICBpZiAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgU3RvcmFnZVV0aWwucmVtb3ZlKHRoaXMuc3RvcmFnZSwga2V5KTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgbGV0IGluZGV4ID0gMDtcclxuICAgIGxldCBuZXh0ID0gU3RvcmFnZVV0aWwua2V5KHRoaXMuc3RvcmFnZSwgaW5kZXgpO1xyXG4gICAgY29uc3QgbHM6IHN0cmluZ1tdID0gW107XHJcbiAgICB3aGlsZSAobmV4dCkge1xyXG4gICAgICBpZiAoa2V5LnRlc3QobmV4dCkpIGxzLnB1c2gobmV4dCk7XHJcbiAgICAgIG5leHQgPSBTdG9yYWdlVXRpbC5rZXkodGhpcy5zdG9yYWdlLCArK2luZGV4KTtcclxuICAgIH1cclxuICAgIGxzLmZvckVhY2godiA9PiBTdG9yYWdlVXRpbC5yZW1vdmUodGhpcy5zdG9yYWdlLCB2KSk7XHJcbiAgfVxyXG5cclxuICBjbGVhcigpIHtcclxuICAgIHRoaXMuc3RvcmFnZS5jbGVhcigpO1xyXG4gIH1cclxufVxyXG5cclxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcclxuZXhwb3J0IGNsYXNzIExvY2FsU3RvcmFnZVNlcnZpY2UgZXh0ZW5kcyBTdG9yYWdlU2VydmljZSB7XHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICBzdXBlcihsb2NhbFN0b3JhZ2UpO1xyXG4gIH1cclxufVxyXG5cclxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcclxuZXhwb3J0IGNsYXNzIFNlc3Npb25TdG9yYWdlU2VydmljZSBleHRlbmRzIFN0b3JhZ2VTZXJ2aWNlIHtcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHN1cGVyKHNlc3Npb25TdG9yYWdlKTtcclxuICB9XHJcbn1cclxuIl19