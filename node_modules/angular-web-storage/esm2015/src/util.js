export class StorageUtil {
    static get(storage, key) {
        const value = StorageUtil.parse(storage.getItem(key) || 'null') || null;
        if (value === null)
            return null;
        if (typeof value === 'object' &&
            typeof value._expired !== 'undefined' &&
            value._expired !== 0 &&
            +new Date() > value._expired) {
            StorageUtil.remove(storage, key);
            return null;
        }
        return value._value || null;
    }
    static set(storage, key, value, expiredAt = 0, expiredUnit = 't') {
        storage.setItem(key, StorageUtil.stringify({
            _expired: StorageUtil.getExpired(expiredAt, expiredUnit),
            _value: value,
        }));
    }
    static remove(storage, key) {
        storage.removeItem(key);
    }
    static key(storage, index) {
        return storage.key(index);
    }
    static getExpired(val, unit) {
        if (val <= 0)
            return 0;
        const now = +new Date();
        switch (unit) {
            case 's': // 秒
                return now + 1000 * val;
            case 'm': // 分
                return now + 1000 * 60 * val;
            case 'h': // 时
                return now + 1000 * 60 * 60 * val;
            case 'd': // 天
                return now + 1000 * 60 * 60 * 24 * val;
            case 'w': // 周
                return now + 1000 * 60 * 60 * 24 * 7 * val;
            case 'y': // 年
                return now + 1000 * 60 * 60 * 24 * 365 * val;
            case 't': // 自定义
                return now + val;
        }
        return 0;
    }
    static stringify(value) {
        return JSON.stringify(value);
    }
    static parse(text) {
        try {
            return JSON.parse(text) || null;
        }
        catch (e) {
            return text;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItd2ViLXN0b3JhZ2UvIiwic291cmNlcyI6WyJzcmMvdXRpbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFZQSxNQUFNLE9BQU8sV0FBVztJQUN0QixNQUFNLENBQUMsR0FBRyxDQUFDLE9BQWdCLEVBQUUsR0FBVztRQUN0QyxNQUFNLEtBQUssR0FBRyxXQUFXLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDO1FBQ3hFLElBQUksS0FBSyxLQUFLLElBQUk7WUFBRSxPQUFPLElBQUksQ0FBQztRQUNoQyxJQUNFLE9BQU8sS0FBSyxLQUFLLFFBQVE7WUFDekIsT0FBTyxLQUFLLENBQUMsUUFBUSxLQUFLLFdBQVc7WUFDckMsS0FBSyxDQUFDLFFBQVEsS0FBSyxDQUFDO1lBQ3BCLENBQUMsSUFBSSxJQUFJLEVBQUUsR0FBRyxLQUFLLENBQUMsUUFBUSxFQUM1QjtZQUNBLFdBQVcsQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1lBQ2pDLE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFFRCxPQUFPLEtBQUssQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDO0lBQzlCLENBQUM7SUFFRCxNQUFNLENBQUMsR0FBRyxDQUNSLE9BQWdCLEVBQ2hCLEdBQVcsRUFDWCxLQUFVLEVBQ1YsWUFBb0IsQ0FBQyxFQUNyQixjQUEyQixHQUFHO1FBRTlCLE9BQU8sQ0FBQyxPQUFPLENBQ2IsR0FBRyxFQUNILFdBQVcsQ0FBQyxTQUFTLENBQUM7WUFDcEIsUUFBUSxFQUFFLFdBQVcsQ0FBQyxVQUFVLENBQUMsU0FBUyxFQUFFLFdBQVcsQ0FBQztZQUN4RCxNQUFNLEVBQUUsS0FBSztTQUNkLENBQUMsQ0FDSCxDQUFDO0lBQ0osQ0FBQztJQUVELE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBZ0IsRUFBRSxHQUFXO1FBQ3pDLE9BQU8sQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDMUIsQ0FBQztJQUVELE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBZ0IsRUFBRSxLQUFhO1FBQ3hDLE9BQU8sT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM1QixDQUFDO0lBRU8sTUFBTSxDQUFDLFVBQVUsQ0FBQyxHQUFXLEVBQUUsSUFBaUI7UUFDdEQsSUFBSSxHQUFHLElBQUksQ0FBQztZQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3ZCLE1BQU0sR0FBRyxHQUFHLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUN4QixRQUFRLElBQUksRUFBRTtZQUNaLEtBQUssR0FBRyxFQUFFLElBQUk7Z0JBQ1osT0FBTyxHQUFHLEdBQUcsSUFBSSxHQUFHLEdBQUcsQ0FBQztZQUMxQixLQUFLLEdBQUcsRUFBRSxJQUFJO2dCQUNaLE9BQU8sR0FBRyxHQUFHLElBQUksR0FBRyxFQUFFLEdBQUcsR0FBRyxDQUFDO1lBQy9CLEtBQUssR0FBRyxFQUFFLElBQUk7Z0JBQ1osT0FBTyxHQUFHLEdBQUcsSUFBSSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsR0FBRyxDQUFDO1lBQ3BDLEtBQUssR0FBRyxFQUFFLElBQUk7Z0JBQ1osT0FBTyxHQUFHLEdBQUcsSUFBSSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEdBQUcsQ0FBQztZQUN6QyxLQUFLLEdBQUcsRUFBRSxJQUFJO2dCQUNaLE9BQU8sR0FBRyxHQUFHLElBQUksR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO1lBQzdDLEtBQUssR0FBRyxFQUFFLElBQUk7Z0JBQ1osT0FBTyxHQUFHLEdBQUcsSUFBSSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7WUFDL0MsS0FBSyxHQUFHLEVBQUUsTUFBTTtnQkFDZCxPQUFPLEdBQUcsR0FBRyxHQUFHLENBQUM7U0FDcEI7UUFDRCxPQUFPLENBQUMsQ0FBQztJQUNYLENBQUM7SUFFTyxNQUFNLENBQUMsU0FBUyxDQUFDLEtBQVU7UUFDakMsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQy9CLENBQUM7SUFFTyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQVk7UUFDL0IsSUFBSTtZQUNGLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUM7U0FDakM7UUFBQyxPQUFPLENBQUMsRUFBRTtZQUNWLE9BQU8sSUFBSSxDQUFDO1NBQ2I7SUFDSCxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICog6L+H5pyf5pe26Ze05Y2V5L2NXHJcbiAqIHPvvJrnp5JcclxuICogbe+8muWIhlxyXG4gKiBo77ya5pe2XHJcbiAqIGTvvJrlpKlcclxuICogd++8muWRqFxyXG4gKiB577ya5bm0XHJcbiAqIHTvvJroh6rlrprkuYnvvIjmr6vnp5Jtc++8iVxyXG4gKi9cclxuZXhwb3J0IHR5cGUgRXhwaXJlZFVuaXQgPSAncycgfCAnbScgfCAnaCcgfCAnZCcgfCAndycgfCAneScgfCAndCc7XHJcblxyXG5leHBvcnQgY2xhc3MgU3RvcmFnZVV0aWwge1xyXG4gIHN0YXRpYyBnZXQoc3RvcmFnZTogU3RvcmFnZSwga2V5OiBzdHJpbmcpIHtcclxuICAgIGNvbnN0IHZhbHVlID0gU3RvcmFnZVV0aWwucGFyc2Uoc3RvcmFnZS5nZXRJdGVtKGtleSkgfHwgJ251bGwnKSB8fCBudWxsO1xyXG4gICAgaWYgKHZhbHVlID09PSBudWxsKSByZXR1cm4gbnVsbDtcclxuICAgIGlmIChcclxuICAgICAgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJlxyXG4gICAgICB0eXBlb2YgdmFsdWUuX2V4cGlyZWQgIT09ICd1bmRlZmluZWQnICYmXHJcbiAgICAgIHZhbHVlLl9leHBpcmVkICE9PSAwICYmXHJcbiAgICAgICtuZXcgRGF0ZSgpID4gdmFsdWUuX2V4cGlyZWRcclxuICAgICkge1xyXG4gICAgICBTdG9yYWdlVXRpbC5yZW1vdmUoc3RvcmFnZSwga2V5KTtcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZhbHVlLl92YWx1ZSB8fCBudWxsO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIHNldChcclxuICAgIHN0b3JhZ2U6IFN0b3JhZ2UsXHJcbiAgICBrZXk6IHN0cmluZyxcclxuICAgIHZhbHVlOiBhbnksXHJcbiAgICBleHBpcmVkQXQ6IG51bWJlciA9IDAsXHJcbiAgICBleHBpcmVkVW5pdDogRXhwaXJlZFVuaXQgPSAndCcsXHJcbiAgKSB7XHJcbiAgICBzdG9yYWdlLnNldEl0ZW0oXHJcbiAgICAgIGtleSxcclxuICAgICAgU3RvcmFnZVV0aWwuc3RyaW5naWZ5KHtcclxuICAgICAgICBfZXhwaXJlZDogU3RvcmFnZVV0aWwuZ2V0RXhwaXJlZChleHBpcmVkQXQsIGV4cGlyZWRVbml0KSxcclxuICAgICAgICBfdmFsdWU6IHZhbHVlLFxyXG4gICAgICB9KSxcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgcmVtb3ZlKHN0b3JhZ2U6IFN0b3JhZ2UsIGtleTogc3RyaW5nKSB7XHJcbiAgICBzdG9yYWdlLnJlbW92ZUl0ZW0oa2V5KTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBrZXkoc3RvcmFnZTogU3RvcmFnZSwgaW5kZXg6IG51bWJlcikge1xyXG4gICAgcmV0dXJuIHN0b3JhZ2Uua2V5KGluZGV4KTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgc3RhdGljIGdldEV4cGlyZWQodmFsOiBudW1iZXIsIHVuaXQ6IEV4cGlyZWRVbml0KTogbnVtYmVyIHtcclxuICAgIGlmICh2YWwgPD0gMCkgcmV0dXJuIDA7XHJcbiAgICBjb25zdCBub3cgPSArbmV3IERhdGUoKTtcclxuICAgIHN3aXRjaCAodW5pdCkge1xyXG4gICAgICBjYXNlICdzJzogLy8g56eSXHJcbiAgICAgICAgcmV0dXJuIG5vdyArIDEwMDAgKiB2YWw7XHJcbiAgICAgIGNhc2UgJ20nOiAvLyDliIZcclxuICAgICAgICByZXR1cm4gbm93ICsgMTAwMCAqIDYwICogdmFsO1xyXG4gICAgICBjYXNlICdoJzogLy8g5pe2XHJcbiAgICAgICAgcmV0dXJuIG5vdyArIDEwMDAgKiA2MCAqIDYwICogdmFsO1xyXG4gICAgICBjYXNlICdkJzogLy8g5aSpXHJcbiAgICAgICAgcmV0dXJuIG5vdyArIDEwMDAgKiA2MCAqIDYwICogMjQgKiB2YWw7XHJcbiAgICAgIGNhc2UgJ3cnOiAvLyDlkahcclxuICAgICAgICByZXR1cm4gbm93ICsgMTAwMCAqIDYwICogNjAgKiAyNCAqIDcgKiB2YWw7XHJcbiAgICAgIGNhc2UgJ3knOiAvLyDlubRcclxuICAgICAgICByZXR1cm4gbm93ICsgMTAwMCAqIDYwICogNjAgKiAyNCAqIDM2NSAqIHZhbDtcclxuICAgICAgY2FzZSAndCc6IC8vIOiHquWumuS5iVxyXG4gICAgICAgIHJldHVybiBub3cgKyB2YWw7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gMDtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgc3RhdGljIHN0cmluZ2lmeSh2YWx1ZTogYW55KSB7XHJcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBzdGF0aWMgcGFyc2UodGV4dDogc3RyaW5nKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICByZXR1cm4gSlNPTi5wYXJzZSh0ZXh0KSB8fCBudWxsO1xyXG4gICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICByZXR1cm4gdGV4dDtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19